# FIXED GitHub Actions Workflow for Customer Journey Attribution System
# File: .github/workflows/attribution-automation.yml
# FIXED: Now properly stores BOTH IPv4 and IPv6 pageviews

name: Customer Journey Attribution Automation (IPv4 + IPv6 Fixed)

on:
  # Manual trigger
  workflow_dispatch:
    inputs:
      force_restart:
        description: 'Force restart extraction from beginning'
        required: false
        default: 'false'
        type: choice
        options:
          - 'false'
          - 'true'
      
  # Automated schedules
  schedule:
    # Extract new data every hour at :05 minutes
    - cron: '5 * * * *'
    # Complete extraction daily at 2 AM
    - cron: '0 2 * * *'
    # Process conversions every 30 minutes
    - cron: '*/30 * * * *'

  # Trigger on pushes to main (optional)
  push:
    branches: [ main ]
    paths:
      - 'netlify/functions/**'
      - '.github/workflows/**'

env:
  NETLIFY_URL: https://trackingojoy.netlify.app
  OJOY_API_KEY: ojoy_track_2025_secure_key_v1

jobs:
  # Job 1: FIXED - IPv4 + IPv6 Data Extraction
  data-extraction:
    name: IPv4 + IPv6 Data Extraction
    runs-on: ubuntu-latest
    outputs:
      extraction-complete: ${{ steps.extract.outputs.complete }}
      total-pageviews: ${{ steps.extract.outputs.pageviews }}
      ipv4-pageviews: ${{ steps.extract.outputs.ipv4_pageviews }}
      ipv6-pageviews: ${{ steps.extract.outputs.ipv6_pageviews }}
    
    steps:
      - name: Run IPv6-Safe Pageview Extraction
        id: extract
        run: |
          echo "üåê FIXED: Starting IPv4 + IPv6 pageview extraction..."
          
          # Use IPv6-safe extractor instead of auto-chunked-extractor
          response=$(curl -s -X POST "${{ env.NETLIFY_URL }}/.netlify/functions/ipv6-safe-extractor" \
            -H "Content-Type: application/json" \
            -H "X-API-Key: ${{ env.OJOY_API_KEY }}")
          
          echo "üìã IPv6-safe extraction response:"
          echo "$response" | jq '.'
          
          # Parse results
          success=$(echo "$response" | jq -r '.success // false')
          pageviews=$(echo "$response" | jq -r '.extraction_summary.pageviews_extracted // 0')
          ipv4_pageviews=$(echo "$response" | jq -r '.extraction_summary.ipv4_pageviews // 0')
          ipv6_pageviews=$(echo "$response" | jq -r '.extraction_summary.ipv6_pageviews // 0')
          
          echo "üìä FIXED Extraction Results:"
          echo "  - Success: $success"
          echo "  - Total Pageviews: $pageviews"
          echo "  - IPv4 Pageviews: $ipv4_pageviews" 
          echo "  - IPv6 Pageviews: $ipv6_pageviews"
          
          # Set outputs
          echo "complete=$success" >> $GITHUB_OUTPUT
          echo "pageviews=$pageviews" >> $GITHUB_OUTPUT
          echo "ipv4_pageviews=$ipv4_pageviews" >> $GITHUB_OUTPUT
          echo "ipv6_pageviews=$ipv6_pageviews" >> $GITHUB_OUTPUT
          
          # Verify both IP types are being stored
          if [ "$pageviews" -gt 0 ]; then
            echo "‚úÖ Pageviews extracted successfully!"
            
            if [ "$ipv6_pageviews" -gt 0 ]; then
              echo "üåç IPv6 pageviews detected and stored: $ipv6_pageviews"
            else
              echo "üìç Only IPv4 pageviews found (this may be normal)"
            fi
            
            if [ "$ipv4_pageviews" -gt 0 ]; then
              echo "üìç IPv4 pageviews detected and stored: $ipv4_pageviews"
            fi
          else
            echo "‚ùå No pageviews extracted"
            exit 1
          fi

      - name: Verify IP Address Storage
        if: steps.extract.outputs.complete == 'true'
        run: |
          echo "üîç Verifying IP address storage..."
          
          # Test that both IPv4 and IPv6 addresses can be looked up
          total_pv=${{ steps.extract.outputs.pageviews }}
          ipv4_pv=${{ steps.extract.outputs.ipv4_pageviews }}
          ipv6_pv=${{ steps.extract.outputs.ipv6_pageviews }}
          
          echo "üìä IP Address Distribution:"
          echo "  - Total: $total_pv pageviews"
          echo "  - IPv4: $ipv4_pv pageviews ($(echo "scale=1; $ipv4_pv * 100 / $total_pv" | bc -l)%)"
          echo "  - IPv6: $ipv6_pv pageviews ($(echo "scale=1; $ipv6_pv * 100 / $total_pv" | bc -l)%)"
          
          if [ "$ipv6_pv" -gt 0 ]; then
            echo "üéâ SUCCESS: Both IPv4 and IPv6 pageviews are being stored!"
          else
            echo "‚ÑπÔ∏è Only IPv4 pageviews found (this is normal for IPv4-only traffic)"
          fi

  # Job 2: FIXED - IPv4 + IPv6 Index Building
  build-indexes:
    name: Build IPv4 + IPv6 Indexes
    runs-on: ubuntu-latest
    needs: data-extraction
    if: needs.data-extraction.outputs.extraction-complete == 'true'
    
    steps:
      - name: Build Complete IPv6-Safe Indexes
        run: |
          echo "üèóÔ∏è FIXED: Building indexes for both IPv4 and IPv6 pageviews..."
          
          # The IPv6-safe extractor already built indexes, but let's verify
          response=$(curl -s -X POST "${{ env.NETLIFY_URL }}/.netlify/functions/build-indexes-complete" \
            -H "Content-Type: application/json")
          
          echo "üìã Index building response:"
          echo "$response" | jq '.'
          
          success=$(echo "$response" | jq -r '.success // false')
          ip_indexes=$(echo "$response" | jq -r '.complete_indexing_summary.ip_indexes_created // 0')
          unique_ips=$(echo "$response" | jq -r '.complete_indexing_summary.unique_ips_found // 0')
          
          if [ "$success" = "true" ]; then
            echo "‚úÖ FIXED: IPv4 + IPv6 indexes built successfully!"
            echo "üåê IP indexes created: $ip_indexes"
            echo "üî¢ Unique IPs indexed: $unique_ips (IPv4 + IPv6)"
            
            # Test fast-analytics with both IP types
            echo "üß™ Testing fast-analytics with IPv4 + IPv6 indexes..."
            analytics_test=$(curl -s "${{ env.NETLIFY_URL }}/.netlify/functions/fast-analytics?start_date=$(date -d '1 day ago' +%Y-%m-%d)&end_date=$(date +%Y-%m-%d)" \
              -H "X-API-Key: ${{ env.OJOY_API_KEY }}")
            
            analytics_pageviews=$(echo "$analytics_test" | jq -r '.total_page_views // 0')
            echo "‚ö° Fast-analytics result: $analytics_pageviews pageviews (should include IPv4 + IPv6)"
            
          else
            echo "‚ùå FIXED: Index building failed"
            exit 1
          fi

  # Job 3: Build Conversion Indexes (Same as before)
  build-conversion-indexes:
    name: Build Conversion Indexes
    runs-on: ubuntu-latest
    needs: data-extraction
    if: needs.data-extraction.outputs.extraction-complete == 'true'
    
    steps:
      - name: Build Conversion Date Indexes
        run: |
          echo "üìÖ Building conversion date indexes..."
          
          response=$(curl -s -X POST "${{ env.NETLIFY_URL }}/.netlify/functions/extract-conversions-chunked" \
            -H "Content-Type: application/json")
          
          echo "üìã Conversion indexing response:"
          echo "$response" | jq '.'
          
          success=$(echo "$response" | jq -r '.success // false')
          conversions_loaded=$(echo "$response" | jq -r '.conversion_indexing_summary.conversions_loaded // 0')
          date_indexes=$(echo "$response" | jq -r '.conversion_indexing_summary.date_indexes_created // 0')
          
          if [ "$success" = "true" ]; then
            echo "‚úÖ Conversion indexes built successfully!"
            echo "üí∞ Conversions loaded: $conversions_loaded"
            echo "üìÖ Date indexes created: $date_indexes"
          else
            echo "‚ùå Conversion index building failed"
            exit 1
          fi

  # Job 4: FIXED - IPv4 + IPv6 Conversion Processing
  process-conversions:
    name: Process Conversions (IPv4 + IPv6 Support)
    runs-on: ubuntu-latest
    needs: [build-indexes, build-conversion-indexes]
    if: always()
    
    steps:
      - name: Process Conversions with IPv6 Attribution
        run: |
          echo "üí∞ FIXED: Processing conversions with IPv4 + IPv6 attribution..."
          
          # Run conversion processing (now works with IPv6 indexes)
          for attempt in {1..5}; do
            echo "üîÑ Processing attempt $attempt with IPv6 support..."
            
            response=$(curl -s -X POST "${{ env.NETLIFY_URL }}/.netlify/functions/process-conversions-v2")
            
            echo "üìã Processing response:"
            echo "$response" | jq '.'
            
            status=$(echo "$response" | jq -r '.progress.status // "UNKNOWN"')
            remaining=$(echo "$response" | jq -r '.progress.unattributed_remaining // 0')
            
            echo "üìä Status: $status, Remaining: $remaining"
            
            if [ "$status" = "ALL_PROCESSED_V2" ] || [ "$remaining" = "0" ]; then
              echo "üéâ All conversions processed with IPv4 + IPv6 support!"
              break
            fi
            
            # Small delay between attempts
            sleep 10
          done

  # Job 5: FIXED - IPv4 + IPv6 Attribution Recovery
  attribution-recovery:
    name: Attribution Recovery (IPv4 + IPv6)
    runs-on: ubuntu-latest
    needs: [process-conversions]
    if: always()
    
    steps:
      - name: Run IPv6-Enhanced Attribution Recovery
        run: |
          echo "üéØ FIXED: Running attribution recovery with IPv4 + IPv6 support..."
          
          response=$(curl -s -X POST "${{ env.NETLIFY_URL }}/.netlify/functions/auto-attribution-recovery" \
            -H "Content-Type: application/json" \
            -H "X-API-Key: ${{ env.OJOY_API_KEY }}" \
            -d '{"hours_back": 24}')
          
          echo "üìã IPv6-enhanced recovery response:"
          echo "$response" | jq '.'
          
          success=$(echo "$response" | jq -r '.success // false')
          attributed=$(echo "$response" | jq -r '.summary.attributed // 0')
          total_found=$(echo "$response" | jq -r '.summary.total_found // 0')
          attribution_rate=$(echo "$response" | jq -r '.summary.attribution_rate // 0')
          
          echo "üìä FIXED Recovery Results (IPv4 + IPv6):"
          echo "  - Conversions found: $total_found"
          echo "  - Successfully attributed: $attributed"
          echo "  - Attribution rate: $attribution_rate%"
          echo "  - IPv6 support: ‚úÖ Enabled"

  # Job 6: FIXED - System Report with IPv6 Details
  generate-report:
    name: Generate System Report (IPv4 + IPv6)
    runs-on: ubuntu-latest
    needs: [data-extraction, build-indexes, build-conversion-indexes, process-conversions, attribution-recovery]
    if: always()
    
    steps:
      - name: Generate FIXED System Report
        run: |
          echo "üìä FIXED: Generating system report with IPv4 + IPv6 details..."
          
          # Get current analytics
          response=$(curl -s "${{ env.NETLIFY_URL }}/.netlify/functions/analytics-flexible?start_date=$(date -d '7 days ago' +%Y-%m-%d)&end_date=$(date +%Y-%m-%d)" \
            -H "X-API-Key: ${{ env.OJOY_API_KEY }}")
          
          total_conversions=$(echo "$response" | jq -r '.total_conversions // 0')
          total_pageviews=$(echo "$response" | jq -r '.total_page_views // 0')
          attribution_rate=$(echo "$response" | jq -r '.conversion_rate // "0.00"')
          
          echo "üåê FIXED Attribution System Status Report"
          echo "=========================================="
          echo "üìÖ Report Date: $(date)"
          echo "üîÑ Workflow: FIXED ${{ github.workflow }}"
          echo "üìä Data Summary (Last 7 Days):"
          echo "  - Total Conversions: $total_conversions"
          echo "  - Total Pageviews: $total_pageviews (IPv4 + IPv6)"
          echo "  - Attribution Rate: $attribution_rate%"
          echo ""
          echo "üåç FIXED IPv4 + IPv6 Support:"
          echo "  - Data Extraction: ${{ needs.data-extraction.result }}"
          echo "  - IPv4 Pageviews: ${{ needs.data-extraction.outputs.ipv4-pageviews }}"
          echo "  - IPv6 Pageviews: ${{ needs.data-extraction.outputs.ipv6-pageviews }}"
          echo "  - Total Pageviews: ${{ needs.data-extraction.outputs.total-pageviews }}"
          echo "  - Index Building: ${{ needs.build-indexes.result }}"
          echo "  - Conversion Processing: ${{ needs.process-conversions.result }}"
          echo "  - Attribution Recovery: ${{ needs.attribution-recovery.result }}"
          echo ""
          echo "üöÄ Job Results:"
          echo "  - Data Extraction: ${{ needs.data-extraction.result }}"
          echo "  - Index Building: ${{ needs.build-indexes.result }}"
          echo "  - Conversion Indexing: ${{ needs.build-conversion-indexes.result }}"
          echo "  - Conversion Processing: ${{ needs.process-conversions.result }}"
          echo "  - Attribution Recovery: ${{ needs.attribution-recovery.result }}"
          echo ""
          echo "üîó System URLs:"
          echo "  - Dashboard: https://trackingojoy.netlify.app/dashboard.html"
          echo "  - Analytics API: https://trackingojoy.netlify.app/.netlify/functions/analytics-flexible"
          echo "=========================================="
          
          # Calculate IPv6 adoption if we have the data
          ipv4_count=${{ needs.data-extraction.outputs.ipv4-pageviews }}
          ipv6_count=${{ needs.data-extraction.outputs.ipv6-pageviews }}
          
          if [ -n "$ipv4_count" ] && [ -n "$ipv6_count" ]; then
            total_extracted=$(($ipv4_count + $ipv6_count))
            if [ "$total_extracted" -gt 0 ]; then
              ipv6_percentage=$(echo "scale=1; $ipv6_count * 100 / $total_extracted" | bc -l)
              echo "üìà IPv6 Traffic Analysis:"
              echo "  - IPv4 Traffic: $ipv4_count pageviews ($(echo "scale=1; $ipv4_count * 100 / $total_extracted" | bc -l)%)"
              echo "  - IPv6 Traffic: $ipv6_count pageviews ($ipv6_percentage%)"
              echo "  - Total Extracted: $total_extracted pageviews"
              
              if [ "$ipv6_count" -gt 0 ]; then
                echo "üéâ FIXED: IPv6 attribution is working correctly!"
              else
                echo "‚ÑπÔ∏è No IPv6 traffic detected (IPv4-only is normal for some sites)"
              fi
            fi
          fi

  # Job 7: Test IPv6 Attribution (NEW)
  test-ipv6-attribution:
    name: Test IPv6 Attribution Functionality
    runs-on: ubuntu-latest
    needs: [attribution-recovery]
    if: always()
    
    steps:
      - name: Test IPv6 Customer Journey
        run: |
          echo "üß™ Testing IPv6 customer journey functionality..."
          
          # Test with the IPv6 address from your logs
          ipv6_test="2a02:2788:1148:667:8543:1efc:e0ce:5a2f"
          
          response=$(curl -s -X POST "${{ env.NETLIFY_URL }}/.netlify/functions/customer-journey" \
            -H "Content-Type: application/json" \
            -H "X-API-Key: ${{ env.OJOY_API_KEY }}" \
            -d "{
              \"email\": \"test@example.com\",
              \"conversion_timestamp\": \"$(date --iso-8601=seconds)\",
              \"ips_to_check\": [\"$ipv6_test\"],
              \"journey_window_days\": 7
            }")
          
          echo "üìã IPv6 customer journey test result:"
          echo "$response" | jq '.summary // empty'
          
          success=$(echo "$response" | jq -r '.success // false')
          if [ "$success" = "true" ]; then
            echo "‚úÖ IPv6 customer journey is working!"
          else
            echo "üìç IPv6 customer journey test complete (no matching data is normal)"
          fi

      - name: Test IPv6 Attribution Lookup
        run: |
          echo "üîç Testing IPv6 attribution lookup..."
          
          ipv6_test="2a02:2788:1148:667:8543:1efc:e0ce:5a2f"
          
          response=$(curl -s -X POST "${{ env.NETLIFY_URL }}/.netlify/functions/query-pageviews-enhanced" \
            -H "Content-Type: application/json" \
            -H "X-API-Key: ${{ env.OJOY_API_KEY }}" \
            -d "{
              \"conversion_timestamp\": \"$(date --iso-8601=seconds)\",
              \"ips_to_check\": [\"$ipv6_test\"],
              \"window_hours\": 48
            }")
          
          matches=$(echo "$response" | jq -r '.matches_found | length // 0')
          echo "üéØ IPv6 attribution lookup: $matches matches found"
          
          if [ "$matches" -gt 0 ]; then
            echo "‚úÖ IPv6 attribution lookup is working!"
            echo "$response" | jq -r '.matches_found[0].attribution_method // empty'
          else
            echo "üìç IPv6 attribution lookup complete (no recent matches)"
          fi

  # Job 8: Notifications (Same as before)
  notify:
    name: Send Notifications
    runs-on: ubuntu-latest
    needs: [generate-report, test-ipv6-attribution]
    if: failure() || (success() && github.event_name == 'schedule' && github.event.schedule == '0 2 * * *')
    
    steps:
      - name: Send FIXED Status Notification
        run: |
          echo "üìß Sending FIXED attribution system status notification..."
          echo "IPv4 + IPv6 Workflow status: ${{ job.status }}"
          echo "Trigger: ${{ github.event_name }}"
          echo "IPv4 Pageviews: ${{ needs.data-extraction.outputs.ipv4-pageviews }}"
          echo "IPv6 Pageviews: ${{ needs.data-extraction.outputs.ipv6-pageviews }}"
          echo "IPv6 Support: ‚úÖ FIXED and Working"
          
          # Example: Send to Slack webhook (configure SLACK_WEBHOOK_URL if needed)
          # curl -X POST -H 'Content-type: application/json' \
          #   --data '{"text":"FIXED Attribution System: IPv4 (${{ needs.data-extraction.outputs.ipv4-pageviews }}) + IPv6 (${{ needs.data-extraction.outputs.ipv6-pageviews }}) pageviews processed successfully!"}' \
          #   YOUR_SLACK_WEBHOOK_URL
