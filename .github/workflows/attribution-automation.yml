# FIXED: Multi-Pattern GitHub Actions Workflow for Customer Journey Attribution System
# File: .github/workflows/attribution-automation.yml
# Fix: Uses manual-pageview-extractor.js with multiple patterns instead of single-pattern auto-chunked-extractor

name: Customer Journey Attribution Automation (Multi-Pattern Fix)

on:
  # Manual trigger
  workflow_dispatch:
    inputs:
      force_restart:
        description: 'Force restart extraction from beginning'
        required: false
        default: 'false'
        type: choice
        options:
          - 'false'
          - 'true'
      date_range_days:
        description: 'Number of days to extract (1-30)'
        required: false
        default: '7'
        type: choice
        options:
          - '1'
          - '3'
          - '7'
          - '14'
          - '30'
      
  # Automated schedules
  schedule:
    # Extract new data every 2 hours at :10 minutes
    - cron: '10 */2 * * *'
    # Complete extraction daily at 2 AM
    - cron: '0 2 * * *'
    # Process conversions every hour at :30 minutes
    - cron: '30 * * * *'

  # Trigger on pushes to main (optional)
  push:
    branches: [ main ]
    paths:
      - 'netlify/functions/**'
      - '.github/workflows/**'

env:
  NETLIFY_URL: https://trackingojoy.netlify.app
  OJOY_API_KEY: ojoy_track_2025_secure_key_v1

jobs:
  # Job 1: Multi-Pattern Data Extraction (FIXED)
  data-extraction:
    name: Multi-Pattern Data Extraction
    runs-on: ubuntu-latest
    outputs:
      extraction-complete: ${{ steps.extract.outputs.complete }}
      total-pageviews: ${{ steps.extract.outputs.pageviews }}
      patterns-used: ${{ steps.extract.outputs.patterns }}
    
    steps:
      - name: Calculate Date Range
        id: dates
        run: |
          # Calculate date range based on input or default to last 7 days
          days_back="${{ github.event.inputs.date_range_days || '7' }}"
          end_date=$(date +%Y-%m-%d)
          start_date=$(date -d "${days_back} days ago" +%Y-%m-%d)
          
          echo "📅 Date range: $start_date to $end_date ($days_back days)"
          echo "start_date=$start_date" >> $GITHUB_OUTPUT
          echo "end_date=$end_date" >> $GITHUB_OUTPUT
          echo "days_back=$days_back" >> $GITHUB_OUTPUT

      - name: Run Multi-Pattern Extraction
        id: extract
        run: |
          echo "🚀 Starting MULTI-PATTERN extraction (FIXED VERSION)..."
          echo "🔍 This will scan ALL patterns where pageviews might exist"
          
          # FIXED: Use manual-pageview-extractor with multiple patterns
          request_body=$(cat <<EOF
          {
            "start_date": "${{ steps.dates.outputs.start_date }}",
            "end_date": "${{ steps.dates.outputs.end_date }}",
            "patterns": [
              "attribution_*",
              "attribution:*", 
              "conversions:*",
              "pageview_*",
              "*2025-07-*",
              "*attribution*"
            ],
            "force_build_indexes": true
          }
          EOF
          )
          
          echo "📋 Request body:"
          echo "$request_body" | jq '.'
          
          # Call the FIXED multi-pattern extractor
          response=$(curl -s -X POST "${{ env.NETLIFY_URL }}/.netlify/functions/manual-pageview-extractor" \
            -H "Content-Type: application/json" \
            -H "X-API-Key: ${{ env.OJOY_API_KEY }}" \
            -d "$request_body")
          
          echo "📋 Multi-pattern extraction response:"
          echo "$response" | jq '.'
          
          # Parse results from the FIXED extractor
          success=$(echo "$response" | jq -r '.success // false')
          pageviews=$(echo "$response" | jq -r '.extraction_results.extraction_summary.pageviews_in_date_range // 0')
          unique_ips=$(echo "$response" | jq -r '.extraction_results.extraction_summary.unique_ips | length // 0')
          ip_indexes=$(echo "$response" | jq -r '.extraction_results.indexes_created.ip_indexes // 0')
          patterns_tried=$(echo "$response" | jq -r '.extraction_results.extraction_summary.patterns_tried | length // 0')
          
          echo "📊 FIXED Extraction Results:"
          echo "  - Success: $success"
          echo "  - Pageviews found: $pageviews"
          echo "  - Unique IPs: $unique_ips"
          echo "  - IP indexes created: $ip_indexes"
          echo "  - Patterns scanned: $patterns_tried"
          
          # Set outputs
          echo "complete=$success" >> $GITHUB_OUTPUT
          echo "pageviews=$pageviews" >> $GITHUB_OUTPUT
          echo "unique_ips=$unique_ips" >> $GITHUB_OUTPUT
          echo "ip_indexes=$ip_indexes" >> $GITHUB_OUTPUT
          echo "patterns=$patterns_tried" >> $GITHUB_OUTPUT
          
          if [ "$success" = "true" ] && [ "$pageviews" -gt "0" ]; then
            echo "🎉 FIXED: Multi-pattern extraction successful!"
            echo "📊 Found $pageviews pageviews across $patterns_tried patterns"
          else
            echo "❌ Extraction failed or found 0 pageviews"
            echo "🔍 This suggests the data might be in different patterns or date ranges"
            exit 1
          fi

      - name: Verify Multi-Pattern Results
        if: steps.extract.outputs.complete == 'true'
        run: |
          echo "✅ VERIFICATION: Multi-pattern extraction completed successfully!"
          echo "📊 Results Summary:"
          echo "  - Total pageviews extracted: ${{ steps.extract.outputs.pageviews }}"
          echo "  - Unique IP addresses: ${{ steps.extract.outputs.unique_ips }}"
          echo "  - IP indexes created: ${{ steps.extract.outputs.ip_indexes }}"
          echo "  - Patterns scanned: ${{ steps.extract.outputs.patterns }}"
          echo "  - Date range: ${{ steps.dates.outputs.start_date }} to ${{ steps.dates.outputs.end_date }}"

  # Job 2: Build Additional Indexes (if needed)
  build-additional-indexes:
    name: Build Additional Search Indexes
    runs-on: ubuntu-latest
    needs: data-extraction
    if: needs.data-extraction.outputs.extraction-complete == 'true'
    
    steps:
      - name: Build Complete Indexes (Fallback)
        run: |
          echo "🏗️ Building additional search indexes if needed..."
          echo "📊 We already have ${{ needs.data-extraction.outputs.ip_indexes }} IP indexes from extraction"
          
          # Only run additional index building if we have pageviews but few indexes
          pageviews=${{ needs.data-extraction.outputs.pageviews }}
          ip_indexes=${{ needs.data-extraction.outputs.ip_indexes }}
          
          if [ "$pageviews" -gt "100" ] && [ "$ip_indexes" -lt "10" ]; then
            echo "🔧 Running additional index building..."
            
            response=$(curl -s -X POST "${{ env.NETLIFY_URL }}/.netlify/functions/build-indexes-complete" \
              -H "Content-Type: application/json")
            
            echo "📋 Additional index building response:"
            echo "$response" | jq '.'
            
            success=$(echo "$response" | jq -r '.success // false')
            additional_indexes=$(echo "$response" | jq -r '.complete_indexing_summary.ip_indexes_created // 0')
            
            if [ "$success" = "true" ]; then
              echo "✅ Additional indexes built: $additional_indexes"
            else
              echo "⚠️ Additional index building failed, but main extraction succeeded"
            fi
          else
            echo "✅ Sufficient indexes already created during extraction"
          fi

  # Job 3: Build Conversion Indexes
  build-conversion-indexes:
    name: Build Conversion Indexes
    runs-on: ubuntu-latest
    needs: data-extraction
    if: needs.data-extraction.outputs.extraction-complete == 'true'
    
    steps:
      - name: Build Conversion Date Indexes
        run: |
          echo "📅 Building conversion date indexes..."
          
          response=$(curl -s -X POST "${{ env.NETLIFY_URL }}/.netlify/functions/extract-conversions-chunked" \
            -H "Content-Type: application/json")
          
          echo "📋 Conversion indexing response:"
          echo "$response" | jq '.'
          
          success=$(echo "$response" | jq -r '.success // false')
          conversions_loaded=$(echo "$response" | jq -r '.conversion_indexing_summary.conversions_loaded // 0')
          date_indexes=$(echo "$response" | jq -r '.conversion_indexing_summary.date_indexes_created // 0')
          
          if [ "$success" = "true" ]; then
            echo "✅ Conversion indexes built successfully!"
            echo "💰 Conversions loaded: $conversions_loaded"
            echo "📅 Date indexes created: $date_indexes"
          else
            echo "⚠️ Conversion index building failed, but continuing workflow"
          fi

  # Job 4: Test Fast Analytics (Verification)
  test-fast-analytics:
    name: Test Fast Analytics System
    runs-on: ubuntu-latest
    needs: [data-extraction, build-additional-indexes, build-conversion-indexes]
    if: needs.data-extraction.outputs.extraction-complete == 'true'
    
    steps:
      - name: Test Fast Analytics Endpoint
        run: |
          echo "🧪 Testing fast analytics with extracted data..."
          
          # Test with the same date range we extracted
          test_url="${{ env.NETLIFY_URL }}/.netlify/functions/fast-analytics?start_date=${{ needs.data-extraction.outputs.start_date }}&end_date=${{ needs.data-extraction.outputs.end_date }}&limit=100"
          
          response=$(curl -s "$test_url" \
            -H "X-API-Key: ${{ env.OJOY_API_KEY }}")
          
          echo "📋 Fast analytics test response:"
          echo "$response" | jq '.'
          
          total_pageviews=$(echo "$response" | jq -r '.total_page_views // 0')
          total_conversions=$(echo "$response" | jq -r '.total_conversions // 0')
          processing_time=$(echo "$response" | jq -r '.processing_stats.execution_time_ms // 0')
          
          echo "📊 Fast Analytics Test Results:"
          echo "  - Pageviews found: $total_pageviews"
          echo "  - Conversions found: $total_conversions"
          echo "  - Processing time: ${processing_time}ms"
          
          if [ "$total_pageviews" -gt "0" ]; then
            echo "✅ Fast analytics is working with extracted data!"
          else
            echo "⚠️ Fast analytics found 0 pageviews - might need index refresh"
          fi

  # Job 5: Conversion Processing
  process-conversions:
    name: Process Unattributed Conversions
    runs-on: ubuntu-latest
    needs: [data-extraction, build-conversion-indexes]
    if: needs.data-extraction.outputs.extraction-complete == 'true'
    
    steps:
      - name: Process Conversions with Enhanced Attribution
        run: |
          echo "💰 Processing unattributed conversions with ${{ needs.data-extraction.outputs.pageviews }} pageviews available..."
          
          # Run conversion processing (processes one conversion per call)
          processed_count=0
          max_attempts=10
          
          for attempt in $(seq 1 $max_attempts); do
            echo "🔄 Processing attempt $attempt/$max_attempts..."
            
            response=$(curl -s -X POST "${{ env.NETLIFY_URL }}/.netlify/functions/process-conversions-v2")
            
            echo "📋 Processing response (attempt $attempt):"
            echo "$response" | jq '.processed_conversion, .progress'
            
            status=$(echo "$response" | jq -r '.progress.status // "UNKNOWN"')
            remaining=$(echo "$response" | jq -r '.progress.unattributed_remaining // 0')
            attribution_found=$(echo "$response" | jq -r '.processed_conversion.attribution_found // false')
            
            echo "📊 Status: $status, Remaining: $remaining, Found Attribution: $attribution_found"
            
            if [ "$attribution_found" = "true" ]; then
              ((processed_count++))
              echo "✅ Attribution found! Total successful: $processed_count"
            fi
            
            if [ "$status" = "ALL_PROCESSED_V2" ] || [ "$remaining" = "0" ]; then
              echo "🎉 All conversions processed!"
              break
            fi
            
            # Small delay between attempts
            sleep 15
          done
          
          echo "📊 Final processing results: $processed_count attributions found in $attempt attempts"

  # Job 6: Attribution Recovery
  attribution-recovery:
    name: Enhanced Attribution Recovery
    runs-on: ubuntu-latest
    needs: [process-conversions]
    if: always()
    
    steps:
      - name: Run Enhanced Attribution Recovery
        run: |
          echo "🎯 Running enhanced attribution recovery with multi-pattern data..."
          
          response=$(curl -s -X POST "${{ env.NETLIFY_URL }}/.netlify/functions/auto-attribution-recovery" \
            -H "Content-Type: application/json" \
            -H "X-API-Key: ${{ env.OJOY_API_KEY }}" \
            -d '{"hours_back": 48}')
          
          echo "📋 Enhanced recovery response:"
          echo "$response" | jq '.'
          
          success=$(echo "$response" | jq -r '.success // false')
          attributed=$(echo "$response" | jq -r '.summary.attributed // 0')
          total_found=$(echo "$response" | jq -r '.summary.total_found // 0')
          attribution_rate=$(echo "$response" | jq -r '.summary.attribution_rate // 0')
          
          echo "📊 Enhanced Recovery Results:"
          echo "  - Conversions found: $total_found"
          echo "  - Successfully attributed: $attributed"
          echo "  - Attribution rate: $attribution_rate%"
          
          if [ "$attributed" -gt "0" ]; then
            echo "🎉 Enhanced recovery found $attributed new attributions!"
          fi

  # Job 7: System Health Check
  system-health-check:
    name: System Health Verification
    runs-on: ubuntu-latest
    needs: [data-extraction, test-fast-analytics, process-conversions, attribution-recovery]
    if: always()
    
    steps:
      - name: Check System Health
        run: |
          echo "🔍 Running system health check..."
          
          response=$(curl -s "${{ env.NETLIFY_URL }}/.netlify/functions/system-status")
          
          echo "📋 System health response:"
          echo "$response" | jq '.'
          
          system_health=$(echo "$response" | jq -r '.system_health // "UNKNOWN"')
          health_score=$(echo "$response" | jq -r '.health_score // 0')
          fast_analytics_working=$(echo "$response" | jq -r '.performance.fast_analytics_working // false')
          pageviews_found=$(echo "$response" | jq -r '.performance.pageviews_found // 0')
          
          echo "🎯 System Health Summary:"
          echo "  - Overall Health: $system_health"
          echo "  - Health Score: $health_score/100"
          echo "  - Fast Analytics: $fast_analytics_working"
          echo "  - Pageviews Available: $pageviews_found"
          
          if [ "$health_score" -ge "80" ]; then
            echo "✅ System is healthy!"
          elif [ "$health_score" -ge "60" ]; then
            echo "⚠️ System needs minor improvements"
          else
            echo "❌ System needs attention"
          fi

  # Job 8: Comprehensive Report
  generate-comprehensive-report:
    name: Generate Comprehensive Report
    runs-on: ubuntu-latest
    needs: [data-extraction, test-fast-analytics, process-conversions, attribution-recovery, system-health-check]
    if: always()
    
    steps:
      - name: Generate Multi-Pattern Success Report
        run: |
          echo "📊 Generating comprehensive system automation report..."
          
          # Get current analytics with our extracted data
          response=$(curl -s "${{ env.NETLIFY_URL }}/.netlify/functions/analytics-flexible?start_date=$(date -d '7 days ago' +%Y-%m-%d)&end_date=$(date +%Y-%m-%d)" \
            -H "X-API-Key: ${{ env.OJOY_API_KEY }}")
          
          total_conversions=$(echo "$response" | jq -r '.total_conversions // 0')
          total_pageviews=$(echo "$response" | jq -r '.total_page_views // 0')
          attribution_rate=$(echo "$response" | jq -r '.conversion_rate // "0.00"')
          
          echo "🎯 FIXED Multi-Pattern Attribution System Report"
          echo "=============================================="
          echo "📅 Report Date: $(date)"
          echo "🔄 Workflow: ${{ github.workflow }} (MULTI-PATTERN FIX)"
          echo "🔧 Fix Applied: Using manual-pageview-extractor with multiple patterns"
          echo ""
          echo "📊 Extraction Results (This Run):"
          echo "  - Extraction Method: Multi-Pattern Scanning"
          echo "  - Pageviews Extracted: ${{ needs.data-extraction.outputs.pageviews }}"
          echo "  - Patterns Scanned: ${{ needs.data-extraction.outputs.patterns }}"
          echo "  - Date Range: ${{ github.event.inputs.date_range_days || '7' }} days"
          echo "  - Extraction Status: ${{ needs.data-extraction.result }}"
          echo ""
          echo "📊 System Data Summary (Last 7 Days):"
          echo "  - Total Conversions: $total_conversions"
          echo "  - Total Pageviews: $total_pageviews"
          echo "  - Attribution Rate: $attribution_rate%"
          echo ""
          echo "🚀 Job Results:"
          echo "  - Multi-Pattern Extraction: ${{ needs.data-extraction.result }}"
          echo "  - Fast Analytics Test: ${{ needs.test-fast-analytics.result }}"
          echo "  - Conversion Processing: ${{ needs.process-conversions.result }}"
          echo "  - Attribution Recovery: ${{ needs.attribution-recovery.result }}"
          echo "  - System Health Check: ${{ needs.system-health-check.result }}"
          echo ""
          echo "🔧 Fix Summary:"
          echo "  - Problem: auto-chunked-extractor found 0 pageviews (single pattern)"
          echo "  - Solution: manual-pageview-extractor with multiple patterns"
          echo "  - Patterns: attribution_*, attribution:*, conversions:*, *2025-07-*"
          echo "  - Result: ${{ needs.data-extraction.outputs.pageviews }} pageviews found"
          echo ""
          echo "🔗 System URLs:"
          echo "  - Dashboard: https://trackingojoy.netlify.app/dashboard.html"
          echo "  - Analytics API: https://trackingojoy.netlify.app/.netlify/functions/analytics-flexible"
          echo "  - Fast Analytics: https://trackingojoy.netlify.app/.netlify/functions/fast-analytics"
          echo "=============================================="

  # Job 9: Failure Notifications
  notify-on-failure:
    name: Failure Notifications
    runs-on: ubuntu-latest
    needs: [data-extraction, generate-comprehensive-report]
    if: failure()
    
    steps:
      - name: Send Failure Notification
        run: |
          echo "🚨 WORKFLOW FAILURE DETECTED"
          echo "=============================="
          echo "📅 Failed at: $(date)"
          echo "🔄 Workflow: ${{ github.workflow }}"
          echo "🎯 Trigger: ${{ github.event_name }}"
          echo "📊 Extraction Status: ${{ needs.data-extraction.result }}"
          echo "📄 Pageviews Found: ${{ needs.data-extraction.outputs.pageviews }}"
          echo ""
          echo "🔍 Possible Issues:"
          echo "  - Multi-pattern extractor might need additional patterns"
          echo "  - Date range might not contain data"
          echo "  - Redis connectivity issues"
          echo "  - API key authentication problems"
          echo ""
          echo "🔧 Debug Commands:"
          echo "  curl -X POST https://trackingojoy.netlify.app/.netlify/functions/manual-pageview-extractor \\"
          echo "    -H 'Content-Type: application/json' \\"
          echo "    -d '{\"start_date\": \"$(date -d '1 day ago' +%Y-%m-%d)\", \"end_date\": \"$(date +%Y-%m-%d)\", \"patterns\": [\"*\"]}"
          echo "=============================="
          
          # Add webhook notification here if needed
          # curl -X POST -H 'Content-type: application/json' \
          #   --data '{"text":"🚨 Attribution System Failed: ${{ job.status }}"}' \
          #   YOUR_SLACK_WEBHOOK_URL

  # Job 10: Success Notifications (Daily Only)
  notify-on-success:
    name: Success Notifications
    runs-on: ubuntu-latest
    needs: [generate-comprehensive-report]
    if: success() && github.event_name == 'schedule' && github.event.schedule == '0 2 * * *'
    
    steps:
      - name: Send Success Notification
        run: |
          echo "✅ DAILY ATTRIBUTION AUTOMATION SUCCESS"
          echo "======================================"
          echo "📅 Completed at: $(date)"
          echo "🔄 Workflow: ${{ github.workflow }}"
          echo "📊 Pageviews Extracted: ${{ needs.data-extraction.outputs.pageviews }}"
          echo "🎯 System Status: Healthy"
          echo ""
          echo "📈 Daily automation completed successfully!"
          echo "🔗 View dashboard: https://trackingojoy.netlify.app/dashboard.html"
          echo "======================================"
